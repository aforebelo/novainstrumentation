import novainstrumentation as ni
import numpy as np
from numpy import *
import pylab as pl
from pylab import *
from wfdbtools import rdsamp, rdann, plot_data
import scipy


def get_ecg_model_beat():
    #record  = '100'
    #data, info = rdsamp(record, 0, 10)
    #ann = rdann(record, 'atr', 0, 10)
    #return data[936+100:1222+100,2]
    return array([-0.39 , -0.375, -0.375, -0.365, -0.37 , -0.385, -0.395, -0.385,
       -0.385, -0.37 , -0.365, -0.37 , -0.375, -0.35 , -0.335, -0.32 ,
       -0.315, -0.32 , -0.325, -0.315, -0.295, -0.285, -0.3  , -0.295,
       -0.285, -0.285, -0.28 , -0.27 , -0.28 , -0.29 , -0.295, -0.295,
       -0.29 , -0.28 , -0.29 , -0.295, -0.31 , -0.295, -0.285, -0.28 ,
       -0.275, -0.295, -0.305, -0.3  , -0.295, -0.295, -0.285, -0.3  ,
       -0.305, -0.3  , -0.295, -0.3  , -0.305, -0.315, -0.31 , -0.315,
       -0.295, -0.3  , -0.31 , -0.33 , -0.34 , -0.33 , -0.32 , -0.32 ,
       -0.315, -0.325, -0.335, -0.33 , -0.315, -0.32 , -0.32 , -0.33 ,
       -0.345, -0.34 , -0.335, -0.33 , -0.335, -0.345, -0.35 , -0.345,
       -0.34 , -0.335, -0.335, -0.33 , -0.335, -0.34 , -0.335, -0.32 ,
       -0.34 , -0.34 , -0.35 , -0.365, -0.36 , -0.345, -0.345, -0.35 ,
       -0.35 , -0.35 , -0.34 , -0.34 , -0.345, -0.345, -0.38 , -0.36 ,
       -0.36 , -0.345, -0.345, -0.35 , -0.355, -0.345, -0.33 , -0.33 ,
       -0.335, -0.335, -0.34 , -0.33 , -0.32 , -0.29 , -0.29 , -0.3  ,
       -0.305, -0.285, -0.28 , -0.275, -0.28 , -0.275, -0.27 , -0.265,
       -0.25 , -0.23 , -0.245, -0.24 , -0.255, -0.255, -0.245, -0.235,
       -0.255, -0.265, -0.26 , -0.255, -0.27 , -0.265, -0.28 , -0.255,
       -0.25 , -0.245, -0.265, -0.28 , -0.3  , -0.315, -0.325, -0.335,
       -0.345, -0.33 , -0.335, -0.345, -0.36 , -0.35 , -0.34 , -0.335,
       -0.345, -0.36 , -0.365, -0.375, -0.37 , -0.365, -0.365, -0.38 ,
       -0.375, -0.375, -0.365, -0.37 , -0.36 , -0.37 , -0.38 , -0.365,
       -0.36 , -0.35 , -0.355, -0.37 , -0.385, -0.395, -0.43 , -0.445,
       -0.485, -0.515, -0.565, -0.555, -0.475, -0.355, -0.22 , -0.055,
        0.185,  0.475,  0.705,  0.82 ,  0.78 ,  0.535,  0.145, -0.2  ,
       -0.42 , -0.5  , -0.48 , -0.45 , -0.41 , -0.4  , -0.39 , -0.39 ,
       -0.4  , -0.405, -0.425, -0.425, -0.405, -0.395, -0.405, -0.405,
       -0.415, -0.405, -0.385, -0.39 , -0.395, -0.395, -0.395, -0.395,
       -0.385, -0.39 , -0.39 , -0.4  , -0.425, -0.41 , -0.4  , -0.395,
       -0.4  , -0.405, -0.425, -0.415, -0.405, -0.405, -0.405, -0.41 ,
       -0.415, -0.405, -0.42 , -0.405, -0.41 , -0.41 , -0.42 , -0.415,
       -0.405, -0.395, -0.395, -0.395, -0.4  , -0.395, -0.395, -0.405,
       -0.405, -0.42 , -0.435, -0.415, -0.405, -0.395, -0.39 , -0.415,
       -0.405, -0.405, -0.4  , -0.395, -0.395, -0.405, -0.42 , -0.415,
       -0.4  , -0.395, -0.4  , -0.405, -0.425, -0.425, -0.425, -0.42 ,
       -0.425, -0.45 , -0.445, -0.45 , -0.435, -0.445])


def rand_in(low,high):
    return rand()*(high-low)+low

def get_exercise_data(student_number):

    seed(student_number)
    
 

    _duration = rand_in(120,180) # in seconds
    _meanhr = rand_in(50,100)
    _stdhr= rand_in(1,10)
    _sinfreq= rand_in(0.1,0.2)

    _noiselevel = rand_in(0.01,0.02) # double
    _wanderlevel = rand_in(0.1,0.2)
    _arrythmia =rand_in(.3,.7)

    _samplingfreq = rand_in(450,550)
    _sinfreq = rand_in(0.1,0.2)
 

    s = get_ecg_model_beat()

    
    t, signal, beats = ni.synthbeats(
        _duration, meanhr = _meanhr,
        stdhr = _stdhr, samplingfreq = _samplingfreq,
        sinfreq = _sinfreq)

    a_indexlow=_arrythmia*_samplingfreq*_duration
    a_indexhigh=a_indexlow+60/_meanhr*_samplingfreq*1.5
    signal[a_indexlow:a_indexhigh]=0

    time = np.arange(len(signal))/250.

    ns=np.convolve(signal,s+0.4)


    s=ns+pl.randn(len(ns))*_noiselevel

    s = s+sin(arange(len(ns))/1000.+pl.randn(len(ns))/5.)*_wanderlevel

    return s

s= get_exercise_data(34567)
#a=pl.randn(10)
plot(s)

#plot(beats[1:],diff(beats))

#db = diff(beats) - mean(diff(beats))
#ni.plotfft(db,500)

draw()
#pl.show()


#ts=scipy.interpolate.spline(array(beats[:-1]),diff(beats),t[beats[1]:beats[-2]]*500.)


# Definition


#f=10
#s= sin(t*(2*pi)*f)
#ni.plotfft(ts,500)
